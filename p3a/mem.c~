#include <stdio.h>
#include <unistd.h>
#include <sys/types.h>
#include <sys/stat.h>
#include <fcntl.h>
#include <sys/mman.h>
#include <string.h>
#include "mem.h"


typedef struct block_hd{
	struct block_hd *next;
	int size;
	int magic_num;
} block_header;

block_header* list_head = NULL;
int first_time_init = 1;

int Mem_Init(int sizeOfRegion){
	if(first_time_init == 0){
		fprintf(stderr,"Error:mem.c: Init mroe than once\n");
                return -1;
	}
	if(sizeOfRegion <= 0){
		fprintf(stderr,"Error:mem.c: Requested block size is not positive\n");
		return -1;
	}
	int page_size;
	int pad_size;
	int fd;
	int alloc_size;
	void* space_ptr;
	page_size = getpagesize();
	pad_size = sizeOfRegion %  page_size;
	if(pad_size !=0)
		pad_size = page_size - pad_size;
	alloc_size = sizeOfRegion + pad_size;
	fd = open ("/dev/zero", O_RDWR);
	if(fd == -1){
		fprintf(stderr,"Cannot opne /dev/zero\n");
		return -1;
	}
	space_ptr = mmap(NULL,alloc_size, PROT_READ | PROT_WRITE, MAP_PRIVATE, fd, 0);
	if(space_ptr == MAP_FAILED){
		fprintf(stderr,"Map failed\n");
                return -1;
	}
	list_head = (block_header*)space_ptr;
	list_head->next = NULL;
	list_head->size = alloc_size - (int)sizeof(block_header);
	first_time_init = 0;
	return 0;
}
	
void* Mem_Alloc(int size){


}

int Mem_Free(void *ptr){


}

void Mem_Dump(){



}
